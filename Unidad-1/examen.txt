Hice el siguiente CRUD:

package mx.edu.utez.examen.controller;

import mx.edu.utez.examen.model.dto.DtoLibro;
import mx.edu.utez.examen.model.entity.LibroBean;
import mx.edu.utez.examen.service.ILibro;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("api/libro")
public class LibroController {
    @Autowired
    private ILibro libroService;

    @PostMapping("/")
    public DtoLibro create(@RequestBody DtoLibro dtoLibro) {
        LibroBean libroSave = libroService.save(dtoLibro);
        return DtoLibro.builder()
                .id(libroSave.getId())
                .name(libroSave.getName())
                .ISBN(libroSave.getISBN())
                .author(libroSave.getAuthor())
                .page_number(libroSave.getPage_number())
                .category(libroSave.getCategory())
                .publication_date(libroSave.getPublication_date()).build();
    }

    @PutMapping("/")
    public DtoLibro update(@RequestBody DtoLibro dtoLibro) {
        LibroBean libroUpdate = libroService.save(dtoLibro);
        return DtoLibro.builder()
                .id(libroUpdate.getId())
                .name(libroUpdate.getName())
                .ISBN(libroUpdate.getISBN())
                .author(libroUpdate.getAuthor())
                .page_number(libroUpdate.getPage_number())
                .category(libroUpdate.getCategory())
                .publication_date(libroUpdate.getPublication_date()).build();
    }


    @DeleteMapping("/{id}")
    public void delete(@PathVariable Integer id) {
        LibroBean libro = libroService.findById(id);
        libroService.delete(libro);
    }

    @GetMapping("/{id}")
    public LibroBean showById(@PathVariable Integer id) {
        return libroService.findById(id);
    }

    @GetMapping("/")
    public List<LibroBean> findAll() {
        return libroService.findAll();
    }
}


package mx.edu.utez.examen.model.dao;

import mx.edu.utez.examen.model.entity.LibroBean;
import org.springframework.data.repository.CrudRepository;

public interface DaoLibro extends CrudRepository<LibroBean, Integer> {
}

package mx.edu.utez.examen.model.dto;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.ToString;

import java.time.LocalDate;

@Data
@AllArgsConstructor
@ToString
@Builder
public class DtoLibro {
    private Integer id;
    private String name;
    private String ISBN;
    private String author;
    private Long page_number;
    private String category;
    private String publication_date;
}

package mx.edu.utez.examen.model.entity;

import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDate;

@Data
@AllArgsConstructor
@NoArgsConstructor
@ToString
@Builder
@Entity
@Table(name = "libro")
public class LibroBean {
    @Id
    @Column(name = "id")
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;
    @Column(name = "name", nullable = false)
    private String name;
    @Column(name = "ISBN", nullable = false)
    private String ISBN;
    @Column(name = "author", nullable = false)
    private String author;
    @Column(name = "page_number", nullable = false)
    private Long page_number;
    @Column(name = "category", nullable = false)
    private String category;
    @Column(name = "publication_date", nullable = false)
    private String publication_date;
}


package mx.edu.utez.examen.service.Impl;

import mx.edu.utez.examen.model.dao.DaoLibro;
import mx.edu.utez.examen.model.dto.DtoLibro;
import mx.edu.utez.examen.model.entity.LibroBean;
import mx.edu.utez.examen.service.ILibro;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
public class ImplLibro implements ILibro {
    @Autowired
    private DaoLibro daoLibro;

    @Override
    public LibroBean save(DtoLibro dtoLibro) {
        LibroBean libro = LibroBean.builder().id(dtoLibro.getId())
                .name(dtoLibro.getName())
                .ISBN(dtoLibro.getISBN())
                .author(dtoLibro.getAuthor())
                .page_number(dtoLibro.getPage_number())
                .category(dtoLibro.getCategory())
                .publication_date(dtoLibro.getPublication_date()).build();
        return daoLibro.save(libro);
    }

    @Transactional(readOnly = true)
    @Override
    public LibroBean findById(Integer id) {
        return daoLibro.findById(id).orElse(null);
    }

    @Override
    public void delete(LibroBean libro) {
        daoLibro.delete(libro);
    }

    @Override
    public List<LibroBean> findAll() {
        return (List<LibroBean>) daoLibro.findAll();
    }


package mx.edu.utez.examen.service;

import mx.edu.utez.examen.model.dto.DtoLibro;
import mx.edu.utez.examen.model.entity.LibroBean;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

public interface ILibro {
    LibroBean save(DtoLibro libro);

    LibroBean findById(Integer id);

    void delete(LibroBean libro);

    @Transactional(readOnly = true)
    List<LibroBean> findAll();
}


}


Implemente una función que, a partir de los datos del libro ingresados, genera un folio único para el libro. Este folio debe ser único y consistente para cada libro.
El folio del libro se debe componer de la primera letra del título, la primera letra del nombre del autor, las primeras dos letras del apellido del autor, la fecha de publicación (yyyy-MM-dd), las primeras 4 letras del ISBN y 2 dígitos random (letras y números).
No debe haber libros con el mismo folio y ISBN.







